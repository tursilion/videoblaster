* Not even trying to be smart, just a quick hack of the cart
* version to work with Ralph's AMS demo.
* Assumes everything, player and data, is loaded into AMS
* starting at page 0, and that page 0 is mapped and enabled
* at >A000
*
* We treat AMS like a cartridge - though the bank switching
* is a little more expensive (we have to write two words
* to bank 8k). We run everything through >A000-BFFF
*
* To patch this into a cart image, just copy out the word at
* offset 10, subtract >6000 and add 1 to make odd, paste this code 
* in the first bank, and then write the new word back to 10 again.
*
* Minor attempt to improve the timing here too, I learned
* that the sound chip writes take about 28 more cycles than
* I had accounted for, as the chip does halt the CPU. However,
* it's not scientific, I really need to just rewrite this.
* 8/5/2018
*
* AV Playback code
* F18A support added - will autodetect
* and play the appropriate version.
* To force no F18A, just hold shift
* at startup.
*
* Will probably run a bit slower than the non-cart version,
* but the non-cart version needs hardware that can auto-increment
* through the data. Whatever, this is just to see if hardware
* resembles emulation. As a result, it's slower, then copied to
* scratchpad to make up for it, and probably ends up close...???
* note that when the bank switch loops it plays the binary, which
* causes noise on the sound channel. To minimize that I wrote a little
* tool that scans the blank part of the first bank after the program
* and inserts an audio sequence to reset the sound generators (first 
* mute them, then reprogram channel 0 in case it was changed).

*
* Final Version:
* Interleaved 8-bit code:
* 8-bit - 336578 cycles per frame
* Each frame has 6144 bytes of video, and 1544 bytes of audio.
* approximate output is: 
* 8.9132 fps and 13762.04 Hz (but audio is best calculated
* as (frames * 6144) = samples / duration = rate)

* Hardware testing shows that this code runs ~10% too slowly
* This means that if my math is right, then this is equivalent
* to 370236 cycles per frame. I am pretty sure my cycle math is
* missing something, also I need to measure whether the sound
* chip HOLD line has any impact. (As noted above, yes it does).

SOUND	EQU	>8400
VDPWA	EQU	>8C02
VDPWD	EQU >8C00
VDPRD	EQU >8800

	DEF MAIN

LOOPPT EQU >83FA
SAVE EQU >83FC
SAVE2 EQU >83FE

* WARNING: if you change the scratchpad code, update these addresses	
LOOP1	EQU >83D2
LOOP18	EQU >83E4
	
	AORG >A000

MAIN
	LIMI 0
	LWPI >8300
	
* copy the end bank over to the save point (tool overwrites this value)
	LI R0,>1267
    MOV R0,@LOOPPT
	
*	* set up sound chip
	LI R0,>9FBF		* mute all channels
	MOVB R0,@SOUND
	SWPB R0
	MOVB R0,@SOUND
	LI R0,>DFFF
	MOVB R0,@SOUND
	SWPB R0
	MOVB R0,@SOUND
	LI R0,>8100		* highest frequency
	MOVB R0,@SOUND
	SWPB R0
	MOVB R0,@SOUND
	
* Set up AMS - we only care about registers 10 and 11
	LI R12,>1E00	* AMS CRU
	SBO 0			* turn on the registers (should already be on)
	CLR @>4014		* page 0 at >A000 (should be already, we'll set up >B000 later)
	SBO 1			* turn on the mapping (if it wasn't already on, we'll crash)
	
* test for F18A, and unlock. 
* run 9918A version if it's not there.
* We just check if the GPU is present by having it 
* run a short program
* F18A blind unlock code
	LI R0,>B91C             * VR1/57, value 00011100
	BL @VDPWTA              * write once (corrupts VDPR1)
	BL @VDPWTA              * write again (unlocks enhanced mode)

* If we are not on the F18A, then R1 is screwed up now, that's okay
	LI R0,>5C00
	BL @VDPWTA
	LI R1,GPUTEST
	LI R2,10
TSTLP
	MOVB *R1+,@VDPWD		* copy program
	DEC R2
	JNE TSTLP
	
	LI R0,>5C10				* test address
	BL @VDPWTA
	CLR @VDPWD				* clear it
	CLR @VDPWD
	
* Start the GPU program, pause, then check the result
	LI R0,>B61C				* MSB
	BL @VDPWTA
	LI R0,>B700				* LSB and start
	BL @VDPWTA
	NOP						* give it a moment - it's WAY faster than we are
	LI R0,>1C10
	BL @VDPWTA
	NOP
	MOVB @VDPRD,R1			* read the data
	SWPB R1
	MOVB @VDPRD,R1
	CI R1,>3412
	JNE F18NO
	B @F18YES

F18NO	
*	* set up bitmap
	BL @BITMAP
	
* Now copy from OUTLOOP to FINAL into scratchpad
* at >8320 - we'll run from there so that paging
* doesn't bite us (although there is room in each
* video page for this code...)
	LI R0,>8320
	LI R1,OUTLOOP
CPLP1
	MOV *R1+,*R0+
	CI R1,FINAL
	JL CPLP1
	
*	* set up copy

* We /could/ get away with 3 blocks, and I did that originally.
* The idea of using four is to interleave the painting more so
* pattern updates are more closely followed by color udpates.
* it causes more obvious paints, but this looks better than the flicker.
	li r1,>0001		* current page
	li r2,>0040		* start address table 1 >0000
	li r3,>0048		* start address table 2 >0800
	li r4,>004B		* start address table 5 >0B00
	li r5,>0050		* start address table 6 >1000
	li r6,>0060		* start address table 3 >2000
	li r7,>0068		* start address table 4 >2800
	li r8,>006B		* start address table 7 >2B00
	li r9,>0070		* start address table 8 >3000
	li r10,192		* size of one table divided by 4 (24*4*8/4)
	li r12,VDPWA
	LI r13,VDPWD
	li r14,>6020
	li r15,SOUND
	
*
* try to keep the cycles between sound writes about even
* the setup blocks need to be 2 cycles longer than the copy blocks
* to make up for the JNE fallthrough being 2 cycles shorter.
*
* Although the smaller code needs fewer bytes to VDP, to keep the
* code reasonably tight, we now need SIX copy loops.
* 
* The data pattern needs to be (P=PATTERN, C=COLOR, S=Sound):
* 1		S
* 192	PPPPS	first 1/3rd, chars 0-95
* 1		S
* 192	CCCCS
* 1		S
* 192	PPPPS	second 1/3rd, chars 0-95
* 1		S
* 192	CCCCS
* 1		S
* 192	PPPPS	second 1/3rd, chars 96-191
* 1		S
* 192	CCCCS
* 1		S
* 192	PPPPS	third 1/3rd, chars 0-95
* 1		S
* 192	CCCCS
*
* Repeat - above sequence is first pattern data, then color data (color at >2000)
* We are interleaving the pattern and color through each table
*
*                                                  8Bit	16bit 

* So go to 'er!
	B @>8320
	
* Setup for normal bitmap mode
* returns with video off - set VDP R1 to E2 to enable (>81E2)
BITMAP
	MOV R11,@SAVE

* set display and disable sprites
	LI R1,BMREGS
	BL @LOADRG
	
* set up SIT - We first fill with 255 bytes
	LI R0,>5800
	BL @VDPWTA
	LI R0,768
	LI R1,>FF00
LP# 
	MOVB R1,@>8C00
	DEC R0
	JNE LP#
	
* Now special setup for each table - we have 16 rows
* of 24 chars each. 
* First table is 4 rows and so starts at row 4
* Indent is 4 chars on each side, so start at 4
	LI R0,>5884	* address
	CLR R1		* char to write
	LI R2,4		* rows left
	BL @WRITEBK
	
* Second table is 8 rows and starts at row 8
	LI R0,>5904	* address
	CLR R1		* char to write
	LI R2,8		* rows left
	BL @WRITEBK
	
* third table is 4 rows and starts at row 16
	LI R0,>5A04	* address
	CLR R1		* char to write
	LI R2,4		* rows left
	BL @WRITEBK
	
	MOV @SAVE,R11
	B *R11

WRITEBK
	MOV R11,@SAVE2
LPA1	
	BL @VDPWTA	* set address
	LI R3,24	* chars left
LPA2
	MOVB R1,@>8C00
	AI R1,>0100	* next char
	DEC R3
	JNE LPA2	* column loop
	
	AI R0,32	* next row
	DEC R2
	JNE LPA1	* row loop
	
	MOV @SAVE2,R11
	B *R11

* registers for bitmap (and 5B00 is the address of the sprite table)
* background is transparent (the only color never redefined)
* PDT - >0000
* SIT - >1800
* SDT - >1800
* CT  - >2000
* SAL - >1B00
BMREGS DATA >81E0,>8002,>8206,>83ff,>8403,>8536,>8603,>8700,>5B00,>0000

* load regs list to VDP address, end on >0000 and write >D0 (for sprites)
* address of table in R1 (destroyed)
LOADRG
LOADLP
	MOV *R1+,R0
	JEQ LDRDN
	SWPB R0
	MOVB R0,@>8C02
	SWPB R0
	MOVB R0,@>8C02
	JMP LOADLP
LDRDN
	LI R1,>D000
	MOVB R1,@>8C00
	B *R11

* Write address or register
VDPWTA
	SWPB R0
	MOVB R0,@>8C02
	SWPB R0
	MOVB R0,@>8C02
	B *R11  


* follow code is copied to >8320 and run from scratchpad	
* original code was 254 bytes, so doesn't fit. This version thus
* uses subroutines, for even slower runs. ;)
OUTLOOP
* select the next AMS page - this expensive op kills our budget ;)
* I could interleave some of this, only the first write needs to be done
* this early...
* We'll loop if it matches LOOPPT					10  (for the jump to here)
	INC R1											10
	SWPB R1											10
	MOV R1,@>4014 	*>A000							30
	SWPB R1											10
	INC R1											10
	SWPB R1											10
	MOV R1,@>4016	*>B000							30
	SWPB R1											10
	
	C R1,@LOOPPT									18
	JNE NOTYETF18									14
	LI R1,>0001										(12 - reset only, not important)
NOTYETF18	
	LI R14,>A020									12	== 188 cycles extra per frame (0.05%, is okay)

* Pattern 1
	MOVB R2,*R12									26
	SWPB R2											10
	MOVB R2,*R12	* VDP address set				26
	SWPB R2											10
*	SRL R0,13		* waste time					38  (commented out - doesn't help the above but no value either)
	MOV R10,R0		* bytes to write divided by 4	14
	MOVB *R14+,*R15	* write sound					64
	BL @LOOP1										20
* 									(rt)			12	= 182 (with waste deleted)

* Color 1
	MOVB R6,*R12									26
	SWPB R6											10
	MOVB R6,*R12	* VDP address set				26
	SWPB R6											10
	SRL R0,13		* waste time					38
	MOV R10,R0		* bytes to write divided by 4	14
	MOVB *R14+,*R15	* write sound					64
	BL @LOOP1										20
*									(rt)			12	= 220

* Pattern 2
	MOVB R3,*R12									26
	SWPB R3											10
	MOVB R3,*R12	* VDP address set				26
	SWPB R3											10
	SRL R0,13		* waste time					38
	MOV R10,R0		* bytes to write divided by 4	14
	MOVB *R14+,*R15	* write sound					64
	BL @LOOP1										20
*									(rt)			12	= 220
	
* Color 2
	MOVB R7,*R12									26
	SWPB R7											10
	MOVB R7,*R12	* VDP address set				26
	SWPB R7											10
	SRL R0,13		* waste time					38
	MOV R10,R0		* bytes to write divided by 4	14
	MOVB *R14+,*R15	* write sound					64
	BL @LOOP1										20
*									(rt)			12	= 220

* Pattern 2b
	MOVB R4,*R12									26
	SWPB R4											10
	MOVB R4,*R12	* VDP address set				26
	SWPB R4											10
	SRL R0,13		* waste time					38
	MOV R10,R0		* bytes to write divided by 4	14
	MOVB *R14+,*R15	* write sound					64
	BL @LOOP1										20
*									(rt)			12	= 220
	
* Color 2b
	MOVB R8,*R12									26
	SWPB R8											10
	MOVB R8,*R12	* VDP address set				26
	SWPB R8											10
	SRL R0,13		* waste time					38
	MOV R10,R0		* bytes to write divided by 4	14
	MOVB *R14+,*R15	* write sound					64
	BL @LOOP1										20
*									(rt)			12	= 220
	
* Pattern 3
	MOVB R5,*R12									26
	SWPB R5											10
	MOVB R5,*R12	* VDP address set				26
	SWPB R5											10
	SRL R0,13		* waste time					38
	MOV R10,R0		* bytes to write divided by 4	14
	MOVB *R14+,*R15	* write sound					64
	BL @LOOP1										20
*									(rt)			12	= 220

* Color 3
	MOVB R9,*R12									26
	SWPB R9											10
	MOVB R9,*R12	* VDP address set				26
	SWPB R9											10
	SRL R0,13		* waste time					38
	MOV R10,R0		* bytes to write divided by 4	14
	MOVB *R14+,*R15	* write sound					64
	BL @LOOP1										20
*									(rt)			12	= 220

	JMP OUTLOOP										10 (counted above)
	
LOOP1X
	MOVB *R14+,*R13	* data							36
	MOVB *R14+,*R13	* data							36
	MOVB *R14+,*R13	* data							36
	MOVB *R14+,*R13	* data							36
	MOVB *R14+,*R15	* write sound					64
	DEC R0											10
	JNE LOOP1X										10	= 228 -> 103%
	B *R11
	
FINAL

*************** F18A Version

F18YES	
* good, copy the GPU program in and start it
	LI R0,>5B80
	BL @VDPWTA
	LI R1,GPUGO
GLDLP
	MOVB *R1+,@VDPWD
	CI R1,GPUEND
	JNE GLDLP
	
* start running (it will move itself into high memory)
	LI R0,>B61B				* MSB
	BL @VDPWTA
	LI R0,>B780				* LSB and start
	BL @VDPWTA
	
*	* set up bitmap
	BL @BITMAP
	
* Now copy from OUTLOOP18 to FINAL18 into scratchpad
* at >8320 - we'll run from there so that paging
* doesn't bite us (although there is room in each
* video page for this code...)
	LI R0,>8320
	LI R1,OUTLOOP18
CPLP118
	MOV *R1+,*R0+
	CI R1,FINAL18
	JL CPLP118
	
* Theory of op:
* This uses 4 copies like the original code, and has the same
* timing and tearing limitations. The difference is that
* each block is copied to 'unused' video RAM, and a command
* written to the polling GPU program.
* The GPU then copies the block as instructed.
* First, the CPU writes the pattern table, then toggles the
* GPU. The GPU copies the pattern data to a block in high
* memory (mostly because we're out of memory in the main
* VDP space, and we can afford the time).
* The CPU then (possibly starting overlapped) copies the
* color table to the buffer. The command next written
* instructs the GPU to copy both pattern and color to the
* correct place for display. Because the GPU has random access
* to VDP memory, it can alternate writes for minimum time
* between updates. Because it's so blinding fast, it should
* easily finish the update before the next block is ready.
* the result should be nearly flicker-free video.
*
* So, the 9900 always writes starting at >1B80,
* it then writes one extra byte to >1E80, containg a GPU
* command:
* 0x80	-	copy to second buffer
* 0x20	- 	copy first blocks
* 0x28	-	copy second blocks
* 0x2B	- 	copy third blocks
* 0x30	-	copy fourth blocks

	li r1,>0001		* first page
	li r2,>805B		* start address buffer >1B80
	li r3,>8000		* copy to second buffer
	li r4,>2000		* copy first blocks
	li r5,>2800		* copy second blocks
	li r6,>2B00		* copy third blocks
	li r7,>3000		* copy fourth blocks
	li r10,192		* size of one table divided by 4 (24*4*8/4)
	li r12,VDPWA
	li r13,VDPWD
	li r14,>6020
	li r15,SOUND

	mov r2,r0
	bl @VDPWTA		* set to buffer address so the first cmd write
*					* doesn't end up in a random place (will not trigger GPU)
	
* So go to 'er!
	B @>8320
	
* follow code is copied to >8320 and run from scratchpad	
* original code was 254 bytes, so doesn't fit. This version thus
* uses subroutines, for even slower runs. ;)
OUTLOOP18
* select the next AMS page - this expensive op kills our budget ;)
* I could interleave some of this, only the first write needs to be done
* this early...
* We'll loop if it matches LOOPPT					10  (for the jump to here)
	INC R1											10
	SWPB R1											10
	MOV R1,@>4014 	*>A000							30
	SWPB R1											10
	INC R1											10
	SWPB R1											10
	MOV R1,@>4016	*>B000							30
	SWPB R1											10
	
	C R1,@LOOPPT									18
	JNE NOTYET										14
	LI R1,>0001										(12 - reset only, not important)
NOTYET	
	LI R14,>A020									12	== 188 cycles extra per frame (0.05%, is okay)

* Pattern 1
	MOVB R7,*R13	* command to copy fourth block	26
	NEG R0			* waste time					12
	MOVB R2,*R12									26
	SWPB R2											10
	MOVB R2,*R12	* VDP address set				26
	SWPB R2											10
	MOV R10,R0		* bytes to write divided by 4	14
	MOVB *R14+,*R15	* write sound					64
	BL @LOOP18										20
*									(rt)			12	= 220

* Color 1
	MOVB R3,*R13	* command to copy to buffer		26
	NEG R0			* waste time					12
	MOVB R2,*R12									26
	SWPB R2											10
	MOVB R2,*R12	* VDP address set				26
	SWPB R2											10
	MOV R10,R0		* bytes to write divided by 4	14
	MOVB *R14+,*R15	* write sound					64
	BL @LOOP18										20
*									(rt)			12	= 220

* Pattern 2
	MOVB R4,*R13	* command to copy first block	26
	NEG R0			* waste time					12
	MOVB R2,*R12									26
	SWPB R2											10
	MOVB R2,*R12	* VDP address set				26
	SWPB R2											10
	MOV R10,R0		* bytes to write divided by 4	14
	MOVB *R14+,*R15	* write sound					64
	BL @LOOP18										20
*									(rt)			12	= 220
	
* Color 2
	MOVB R3,*R13	* command to copy to buffer		26
	NEG R0			* waste time					12
	MOVB R2,*R12									26
	SWPB R2											10
	MOVB R2,*R12	* VDP address set				26
	SWPB R2											10
	MOV R10,R0		* bytes to write divided by 4	14
	MOVB *R14+,*R15	* write sound					64
	BL @LOOP18										20
*									(rt)			12	= 220

* Pattern 2b
	MOVB R5,*R13	* command to copy second block	26
	NEG R0			* waste time					12
	MOVB R2,*R12									26
	SWPB R2											10
	MOVB R2,*R12	* VDP address set				26
	SWPB R2											10
	MOV R10,R0		* bytes to write divided by 4	14
	MOVB *R14+,*R15	* write sound					34
	BL @LOOP18										20
*									(rt)			12	= 220
	
* Color 2b
	MOVB R3,*R13	* command to copy to buffer		26
	NEG R0			* waste time					12
	MOVB R2,*R12									26
	SWPB R2											10
	MOVB R2,*R12	* VDP address set				26
	SWPB R2											10
	MOV R10,R0		* bytes to write divided by 4	14
	MOVB *R14+,*R15	* write sound					64
	BL @LOOP18										20
*									(rt)			12	= 220
	
* Pattern 3
	MOVB R6,*R13	* command to copy third block	26
	NEG R0			* waste time					12
	MOVB R2,*R12									26
	SWPB R2											10
	MOVB R2,*R12	* VDP address set				26
	SWPB R2											10
	MOV R10,R0		* bytes to write divided by 4	14
	MOVB *R14+,*R15	* write sound					64
	BL @LOOP18										20
*									(rt)			12	= 220

* Color 3
	MOVB R3,*R13	* command to copy to buffer		26
	NEG R0			* waste time					12
	MOVB R2,*R12									26
	SWPB R2											10
	MOVB R2,*R12	* VDP address set				26
	SWPB R2											10
	MOV R10,R0		* bytes to write divided by 4	14
	MOVB *R14+,*R15	* write sound					64
	BL @LOOP18										20
*									(rt)			12		

	JMP OUTLOOP18									10	(counted above)
	
LOOP18X
	MOVB *R14+,*R13	* data							36
	MOVB *R14+,*R13	* data							36
	MOVB *R14+,*R13	* data							36
	MOVB *R14+,*R13	* data							36
	MOVB *R14+,*R15	* write sound					64
	DEC R0											10
	JNE LOOP18X										10  =  228
	B *R11

FINAL18

* GPU code (loads at >1B80 in VDP, copies itself to >4000)
* to make life easy, position independent code! (VDP
* addresses are hard coded though, that's fine)
GPUGO
	li r0,>1B80+GPURUN-GPUGO
	li r1,>4300
GCPLP
	MOV *r0+,*r1+
	ci r0,>1b80+GPUEND-GPUGO
	jne GCPLP

* now jump to it!	
	B @>4300
	
* this code running at >4300
GPURUN
	clr @>1E80		* zero command
	CLR R0
GPUWAIT
	MOVB @>1E80,R0	* get it
	JEQ GPUWAIT		* nothing yet
	CLR @>1E80		* clear it
	JLT BUFCPY		* copying to second buffer
	
* main buffer copy - copy >4000 to pattern, and >1B80 to color
* R0 contains the color table target address
	MOV R0,R1		* for pattern table
	ANDI R1,>1FFF
	LI R2,>1B80		* R2->R0 for the color table
	LI R3,>4000		* R3->R1 for the pattern table
	LI R4,96		* we can move words instead of bytes
GPUVLP	
	MOV *R2+,*R0+
	MOV *R3+,*R1+
	MOV *R2+,*R0+
	MOV *R3+,*R1+
	MOV *R2+,*R0+
	MOV *R3+,*R1+
	MOV *R2+,*R0+
	MOV *R3+,*R1+
	DEC R4
	JNE GPUVLP
	JMP GPURUN		* go wait again

BUFCPY
	LI R0,>1B80		* 9900 write buffer
	LI R1,>4000		* second buffer target when >80
	LI R2,96		* we can move words instead of bytes
GPUBLP
	MOV *R0+,*R1+
	MOV *R0+,*R1+
	MOV *R0+,*R1+
	MOV *R0+,*R1+
	DEC R2
	JNE GPUBLP
	JMP GPURUN		* go wait again

GPUEND

GPUTEST
	DATA >0200,>1234		LI R0,>1234
	DATA >C800,>1C10		MOV R0,@>1C10
	DATA >0340				IDLE

	END
	